"use strict";var TcHmi;!function(TcHmi){!function(Controls){!function(UiProvider){!function(Keyboard){class TcHmiKeyboard extends TcHmi.UiProvider.KeyboardProvider{constructor(){super(TcHmiKeyboard.providerName),Object.defineProperty(this,"__keyboardCtrl",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"__popup",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"__mutationObserver",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"__activeTextElement",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"__footerElement",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"__localeChangedRegistered",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,"__deviceHasOSK",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,"__closeViaApi",{enumerable:!0,configurable:!0,writable:!0,value:event=>{this.__activeTextElement&&("resize"===event?.type&&event.target===window.visualViewport&&(this.__deviceHasOSK=!0),"geometrychange"===event?.type&&"virtualKeyboard"in navigator&&navigator.virtualKeyboard instanceof Object&&event.target===navigator.virtualKeyboard&&"overlaysContent"in navigator.virtualKeyboard&&"boolean"==typeof navigator.virtualKeyboard.overlaysContent&&(navigator.virtualKeyboard.overlaysContent=!1,this.__deviceHasOSK=!0),TcHmi.Keyboard.close())}}),Object.defineProperty(this,"__activePointerInteraction",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,"__handlePointerInteraction",{enumerable:!0,configurable:!0,writable:!0,value:evt=>{"pointerdown"===evt.type?this.__activePointerInteraction=!0:"pointerup"===evt.type&&(this.__activePointerInteraction=!1)}})}refreshConfig(){this.__activeTextElement&&this.open(this.__activeTextElement)}open(textElement){if(this.__deviceHasOSK)return{code:TcHmi.Errors.E_NOT_ALLOWED};"virtualKeyboard"in navigator&&navigator.virtualKeyboard instanceof Object&&"addEventListener"in navigator.virtualKeyboard&&"function"==typeof navigator.virtualKeyboard.addEventListener&&"overlaysContent"in navigator.virtualKeyboard&&"boolean"==typeof navigator.virtualKeyboard.overlaysContent?(navigator.virtualKeyboard.addEventListener("geometrychange",this.__closeViaApi),navigator.virtualKeyboard.overlaysContent=!0):window.visualViewport&&(window.visualViewport.addEventListener("resize",this.__closeViaApi),setTimeout((()=>{window.visualViewport?.removeEventListener("resize",this.__closeViaApi)}),400));let requestedInputMode="text";if(textElement.hasAttribute("data-tchmi-input-mode")?requestedInputMode=textElement.getAttribute("data-tchmi-input-mode"):"numeric"===textElement.getAttribute("inputmode")?requestedInputMode="numeric":("decimal"===textElement.getAttribute("inputmode")||"number"===textElement.type)&&(requestedInputMode="decimal"),"skip"===requestedInputMode)return{code:TcHmi.Errors.E_INVALID};if("none"===requestedInputMode)return TcHmi.Keyboard.close(),{code:TcHmi.Errors.E_INVALID};let result=TcHmi.Keyboard.getLayoutFileFromInputMode(requestedInputMode);if(result.error!==TcHmi.Errors.NONE)return result.details;let keyboardUrl=result.layoutUrl;if(textElement!==this.__activeTextElement&&(this.__mutationObserver?.disconnect(),this.__mutationObserver=void 0,this.__mutationObserver=new MutationObserver((mutationList=>{let keyboardConfigChanged=!1;for(const mutation of mutationList)if("attributes"===mutation.type&&("inputmode"===mutation.attributeName||"data-tchmi-input-mode"===mutation.attributeName||"type"===mutation.attributeName)){keyboardConfigChanged=!0;break}keyboardConfigChanged&&this.__activeTextElement&&this.open(this.__activeTextElement)})),this.__mutationObserver.observe(textElement,{attributes:!0})),this.__localeChangedRegistered||(this.__localeChangedRegistered=!0,TcHmi.EventProvider.register("onLocaleChanged",(()=>{this.__activeTextElement&&this.open(this.__activeTextElement)}))),this.__activeTextElement&&this.__activeTextElement!==textElement){this.__activeTextElement.classList.remove("tchmi-keyboard-user-input"),this.__activeTextElement.closest("[data-tchmi-type]")?.classList.remove("tchmi-keyboard-user-input");const customEvent=new CustomEvent("userinputfinished",{bubbles:!0});this.__activeTextElement.dispatchEvent(customEvent)}if(this.__activeTextElement=textElement,this.__keyboardCtrl)this.__keyboardCtrl.setLayoutFile(keyboardUrl);else{if(this.__keyboardCtrl=TcHmi.ControlFactory.createEx(TcHmiKeyboard.keyboardClassFqn,"tchmi-system-keyboard",{"data-tchmi-layout-file":keyboardUrl,"data-tchmi-left":"0","data-tchmi-top":"0","data-tchmi-width-mode":"Content"}),!this.__keyboardCtrl)return TcHmi.Log.errorEx("[Source=Framework, Module=TcHmi.Keyboard] Could not compile keyboard with class",TcHmiKeyboard.keyboardClassFqn,". Aborting."),{code:TcHmi.Errors.ERROR};this.__keyboardCtrl.getElement()[0].style.overflow="visible"}const configuredHeight=TcHmi.Keyboard.getContainerLayout()?.height;configuredHeight?(this.__keyboardCtrl.setHeight(configuredHeight),this.__keyboardCtrl.setHeightMode("Value"),this.__keyboardCtrl.setScaleMode("ScaleToFitHeight")):(this.__keyboardCtrl.setHeight(null),this.__keyboardCtrl.setHeightMode("Content"),this.__keyboardCtrl.setScaleMode("None"));const keyboardPosition=TcHmi.Keyboard.getContainerLayout()?.position??"popup";if("footer"===keyboardPosition){if(this.__popup&&(this.__popup.destroy(),this.__popup=void 0),!this.__footerElement){const container=document.createElement("div");container.classList.add("TcHmi_Controls_UiProvider_TcHmiKeyboard-container");const keyboardElem=this.__keyboardCtrl.getElement()[0];keyboardElem.style.margin="10px auto 5px auto",keyboardElem.style.position="unset";const closeButton=document.createElement("a");closeButton.addEventListener("click",this.__closeViaApi),container.append(closeButton,keyboardElem),this.__footerElement=container}this.__footerElement.isConnected||(TcHmi.View.addViewportElement(this.__footerElement,{name:"tchmi-system-keyboard",area:keyboardPosition}),this.__keyboardCtrl.__processIsEnabled(),this.__keyboardCtrl.__processAccessConfig(),this.__footerElement.addEventListener("pointerdown",this.__handlePointerInteraction),document.addEventListener("pointerup",this.__handlePointerInteraction))}else{if(this.__footerElement&&(this.__footerElement.isConnected&&(TcHmi.View.removeViewportElement(this.__footerElement),this.__footerElement.removeEventListener("pointerdown",this.__handlePointerInteraction),document.removeEventListener("pointerup",this.__handlePointerInteraction)),this.__footerElement=void 0),!this.__popup){const popupProvider=TcHmi.UiProvider.getPreferredProvider("popup");if(!popupProvider)return TcHmi.Log.errorEx("[Source=Framework, Module=TcHmi.Keyboard] Could not open keyboard with popup provider. Aborting."),{code:TcHmi.Errors.ERROR};if(!popupProvider.createHtmlElementBox)return TcHmi.Log.errorEx("[Source=Framework, Module=TcHmi.Keyboard] Could not open keyboard with popup provider. The configured popup ui provider does not implement the method 'createHtmlElementBox'. Please make sure that the provider configured in the systemPopups property of tchmiconfig.json implements this method."),{code:TcHmi.Errors.ERROR};this.__popup=popupProvider.createHtmlElementBox("",this.__keyboardCtrl.getElement()[0],{},null),this.__popup.setPositioningMode(TcHmi.UiProvider.PopupProvider.PositioningMode.Floating),this.__popup.setBounds({left:50,top:50}),this.__popup.setBackgroundMode(TcHmi.UiProvider.PopupProvider.BackgroundMode.None),this.__popup.setMovable(!0),this.__popup.setStorageSettings({name:"TcHmi.Controls.UiProvider.Keyboard.TcHmiKeyboard",restoreBounds:!0}),this.__popup.setCloseButton(!0),this.__popup.onHide.add(this.__closeViaApi),this.__popup.onBoundsChange.add((()=>{this.__keyboardCtrl?.getIsIndirectInputInProgress()?this.__keyboardCtrl.focusIndirectInputTextbox():this.__activeTextElement?.focus()}))}this.__popup.setJustAbove?.(this.__activeTextElement??null),this.__popup.isShowing()||this.__popup.show(),textElement.classList.add("tchmi-keyboard-user-input"),textElement.closest("[data-tchmi-type]")?.classList.add("tchmi-keyboard-user-input")}return{code:TcHmi.Errors.NONE}}close(){if(this.__activeTextElement){this.__activeTextElement.classList.remove("tchmi-keyboard-user-input"),this.__activeTextElement.closest("[data-tchmi-type]")?.classList.remove("tchmi-keyboard-user-input");const customEvent=new CustomEvent("userinputfinished",{bubbles:!0});this.__activeTextElement.dispatchEvent(customEvent)}const wasActive=!!this.__activeTextElement;return this.__activeTextElement=void 0,this.__mutationObserver?.disconnect(),this.__mutationObserver=void 0,"virtualKeyboard"in navigator&&navigator.virtualKeyboard instanceof Object&&"removeEventListener"in navigator.virtualKeyboard&&"function"==typeof navigator.virtualKeyboard.removeEventListener&&navigator.virtualKeyboard.removeEventListener("geometrychange",this.__closeViaApi),window.visualViewport?.removeEventListener("resize",this.__closeViaApi),this.__popup?.hide(),this.__footerElement?.isConnected&&(TcHmi.View.removeViewportElement(this.__footerElement),this.__footerElement.removeEventListener("pointerdown",this.__handlePointerInteraction),document.removeEventListener("pointerup",this.__handlePointerInteraction)),{code:wasActive?TcHmi.Errors.NONE:TcHmi.Errors.E_INVALID}}hasActiveUserInteraction(){return this.__footerElement?.isConnected?this.__activePointerInteraction:!(!this.__popup&&!this.__footerElement)&&(this.__popup?.hasActiveUserInteraction?.()??!0)}}Object.defineProperty(TcHmiKeyboard,"providerName",{enumerable:!0,configurable:!0,writable:!0,value:"Beckhoff.TcHmiKeyboard"}),Object.defineProperty(TcHmiKeyboard,"keyboardClassFqn",{enumerable:!0,configurable:!0,writable:!0,value:"TcHmi.Controls.Beckhoff.TcHmiKeyboard"}),Keyboard.TcHmiKeyboard=TcHmiKeyboard}(UiProvider.Keyboard||(UiProvider.Keyboard={}))}(Controls.UiProvider||(Controls.UiProvider={}))}(TcHmi.Controls||(TcHmi.Controls={}))}(TcHmi||(TcHmi={})),TcHmi.UiProvider.register(new TcHmi.Controls.UiProvider.Keyboard.TcHmiKeyboard);