<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_SmartGreifer" Id="{1e0d412f-2c15-47f4-b717-f9c4f89d77fc}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_SmartGreifer EXTENDS GrundstrukturObjekt
VAR_INPUT
	iSkillCommand_2			:eSkillCommand;		// Steuerungsvariabel von Skill_2
	iSkillCommand_3			:eSkillCommand;		// Steuerungsvariabel von Skill_2
	iSkillCommand_4			:eSkillCommand;		// Steuerungsvariabel von Skill_2
	Prozessvariablen		:sSmartGreiferProzessVariablen; 
END_VAR
VAR_OUTPUT
END_VAR
VAR
	// Instanziierung von Kommunikationsbausteine 
	Communication			:ModbusRtuMasterV2_KL6x22B;
	
	// Kommunikationsvariablen
	UnitID      			:BYTE := 9;
    Quantity    			:WORD;
    MBAddr      			:WORD;
	Timeout     			:TIME := T#5S;
	cbRead					:UINT;
	DataSend				:ARRAY[0..5] OF BYTE;
	DataRead				:ARRAY[0..5] OF BYTE;
	
	// Managementvariablen
	iStartUp			:INT;
	iProzess			:INT;
	iSkillOption		:INT;
	
	bGreiferReset		:BOOL;
	bGreiferLesen		:BOOL;
	
	bAmEinschalten		:BOOL;
	bEingeschalten		:BOOL;
	
	bGestartet			:BOOL;
	
	
	CheckTimer			:TON;
	Delay				:TON;
	
	// Prozessvariablen
	iPos				:BYTE;
	iGeschw				:BYTE;
	iKraft				:BYTE;
	
	// Eigenschaftsvariablen
	iPosMax				:REAL := 85;
	iGeschwMin			:REAL := 20;
	iGeschwMax			:REAL := 150;
	iKraftMin			:REAL := 20;
	iKraftMax			:REAL := 235;
	Anschlag			:BYTE;
	
	Count				:INT;
	
	Check1				:BOOL;
	Check2				:BOOL;
	Check3				:BOOL;
	Check4				:BOOL;
	
	
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[	
//____________________________________________________________________________________________
// Input-Command-Verwaltung
	// System
	IF iSysCommand = 2 AND iState = 0 THEN			// Objekt einschalten
		bEinschalten := TRUE;
	ELSE 
		bEinschalten := FALSE;
	END_IF
	
	IF iSysCommand = 1 AND iState = 1 THEN				// Objekt ausschalten
		bAusschalten := TRUE;		
	ELSE 
		bAusschalten := FALSE;		
	END_IF
	
	IF iSysCommand = 3 THEN								// Objekt beendet Prozess
		bStoppen := TRUE;
	ELSE
		bStoppen := FALSE;
	END_IF
	
	IF iSysCommand = 4 THEN								// System resettet Objekt
		bResettenSystem := TRUE;
	ELSE
		bResettenSystem := FALSE;
	END_IF
	
	// Skill
	IF iSkillCommand_1 = 1 OR iSkillCommand_2 = 1 OR  iSkillCommand_3 = 1 OR iSkillCommand_4 = 1 THEN	// Skill startet Prozess
		IF iSkillCommand_1 = 1 THEN
			iSkillOption := 1;
		END_IF
		
		IF iSkillCommand_2 = 1 THEN
			iSkillOption := 2;
		END_IF
		
		IF iSkillCommand_3 = 1 THEN
			iSkillOption := 3;
		END_IF
		
		IF iSkillCommand_4 = 1 THEN
			iSkillOption := 4;
		END_IF
		
		bStarten := TRUE;
	ELSE 
		bStarten := FALSE;
	END_IF
	
	IF iSkillCommand_1 = 2 OR iSkillCommand_2 = 2 THEN	// Skill beendet Prozess
		bSkillFertig := TRUE;
	ELSE
		bSkillFertig := FALSE;
	END_IF
	
	IF iSkillCommand_1 = 3 OR iSkillCommand_2 = 3 THEN	// Skill resettet Objekt
 		bResettenSkill := TRUE;
	ELSE
		bResettenSkill := FALSE;
	END_IF

//____________________________________________________________________________________________
// Interner Methodenaufruf (Durch System oder Skill)

//____________________________________________________________________________________________
// Datenerfassungsprozess

//____________________________________________________________________________________________
// Zustandsmanagement

IF bFehler THEN 
	iState := 7;
END_IF

CASE iState OF 
	0: // AUS
		// DO
		IF bEinschalten THEN
			CASE iStartUP OF
				0: // Greifer Resetten
					bGreiferReset := Resetten();
					
					IF bGreiferReset THEN
						bGreiferReset := FALSE;
						iStartUp := 1;
					END_IF
				1: // Greifer Aktivieren
					bAmEinschalten := Aktivieren();
					
					IF bAmEinschalten THEN 
						bAmEinschalten := FALSE;
						Delay(IN:= TRUE, PT := T#1S);
					END_IF
					
					IF Delay.Q THEN
						Delay(IN:= FALSE);
						iStartUp := 2;
					END_IF
					
				2:
					bGreiferLesen := StatusLesen(Execute:= TRUE, NrOfReg := 1);
					
					IF bGreiferLesen THEN
						StatusLesen(Execute := FALSE, NrOfReg := 3);
						bGreiferLesen := FALSE;
						IF DataRead[1] = 49  AND DataRead[0] = 0 THEN
							bEingeschalten := TRUE;
						END_IF
					END_IF
			END_CASE
		END_IF
		
		// TRANSITION
		IF bEingeschalten THEN																			// Verbindung wird aufgebaut
			bEingeschalten := FALSE;
			iStartUp := 0;
			iState := 1;
		END_IF
			
	//____________________________________________________________________________________________
	1: // BEREIT
		// DO
			Anschlag := 0;

		// TRANSITION		
			IF bAusschalten THEN
				iState := 0;
			END_IF
																									// Manuell-Modus wird eingeschalten
													
			 IF bStarten THEN																		// Objekt führt Prozessdurch
				 iState := 3;
			 END_IF			
	//____________________________________________________________________________________________
	2: // MANUELL
		// DO
		
		// TRANSITION
	
	//____________________________________________________________________________________________
	3: // LAUFEND
		// DO
			bBusy := TRUE;
			
			// Aktionsprozess 
			CASE iSkillOption OF 
				1:	// Definierte Position anfahren
					CASE iProzess OF 
					0: // Aktion durchführen
						iPos := REAL_TO_BYTE((255.00/iPosMax) *  (iPosMax - Prozessvariablen.Pos));	
						iGeschw := REAL_TO_BYTE((255.00 / 100.00) * Prozessvariablen.Geschw );
						iKraft := REAL_TO_BYTE((255.00 / 100.00) * Prozessvariablen.F);
					
						bGestartet := A_PositionAnfahren(iPos := iPos, iGeschw := iGeschw, iKraft := iKraft);
						
						IF bGestartet THEN
							bGestartet := FALSE;
							Delay(IN:= TRUE, PT := T#1S);
						END_IF
						
						IF Delay.Q THEN
							Delay(IN:= FALSE);
							iProzess := 1;
						END_IF
					
					1: // Prüfen ob Aktion erledigt 
						bGreiferLesen := StatusLesen(Execute := TRUE, NrOfReg := 3);
						CheckTimer(IN := TRUE, PT := T#5S);
						
						IF bGreiferLesen THEN
							bGreiferLesen := FALSE;
							StatusLesen(Execute := FALSE, NrOfReg := 3);
							
							// Greifer hat Position erreicht
							IF 	DataRead[0] = 0 		AND
								DataRead[1] = 249 		AND
								DataRead[2] = iPos 		AND
								DataRead[3] = 0 		AND
								DataRead[4] = 0 		AND
								DataRead[5] = iPos		THEN
								
								CheckTimer(IN := FALSE);
								iProzess := 0;
								bObjektFertig := TRUE;
							END_IF
							
							// Greifer ist in Hinderniss gefahren
							IF 	DataRead[0] = 0 		AND
								DataRead[1] = 185 		AND
								DataRead[3] = 0 		AND
								DataRead[4] = 0 		THEN
								
								CheckTimer(IN := FALSE);
								iProzess := 0;
								bFehler := TRUE;
								iFehlerID := 202;
							END_IF
							
						END_IF
						
						// Zeit wurde überschritten
						IF CheckTimer.Q THEN		
							iProzess := 0;
							CheckTimer(IN := FALSE);
							bFehler := TRUE;
							iFehlerID := 201;
						END_IF
					END_CASE
					
				//______________________________________________________________________________________________________	
				2:	// Greifabstand ermitteln
					CASE iProzess OF 
					0: // Aktion durchführen
						iPos := REAL_TO_BYTE(((255/iPosMax) * (iPosMax - Prozessvariablen.Pos)));	
						iGeschw := REAL_TO_BYTE((255.00 / 100.00) * Prozessvariablen.Geschw );
						iKraft := REAL_TO_BYTE((255.00 / 100.00) * Prozessvariablen.F);
					
						bGestartet := A_PositionAnfahren(iPos := iPos, iGeschw := iGeschw, iKraft := iKraft);
						
						IF bGestartet THEN
							bGestartet := FALSE;
							Delay(IN:= TRUE, PT := T#1S);
						END_IF
						
						IF Delay.Q THEN
							Delay(IN:= FALSE);
							iProzess := 1;
						END_IF
					
					1: // Prüfen ob Aktion erledigt 
						bGreiferLesen := StatusLesen(Execute := TRUE, NrOfReg := 3);
						CheckTimer(IN := TRUE, PT := T#5S);
						
						IF bGreiferLesen THEN
							bGreiferLesen := FALSE;
							StatusLesen(Execute := FALSE, NrOfReg := 3);
							
							// Greifer hat Position erreicht
							IF 	DataRead[0] = 0 		AND
								DataRead[1] = 249 		AND
								DataRead[2] = iPos 		AND
								DataRead[3] = 0 		AND
								DataRead[4] = 0 		AND
								DataRead[5] = iPos		THEN
								
								CheckTimer(IN := FALSE);
								Anschlag := iPos;
								iProzess := 0;
								bObjektFertig := TRUE;
							END_IF
							
							// Greifer ist in Hinderniss gefahren
							IF 	DataRead[0] = 0 		AND
								DataRead[1] = 185 		AND
								DataRead[3] = 0 		AND
								DataRead[4] = 0 		THEN
								
								Anschlag := DataRead[5];
								CheckTimer(IN := FALSE);
								iProzess := 0;
								bObjektFertig := TRUE;								
							END_IF
							
						END_IF
						
						// Zeit wurde überschritten
						IF CheckTimer.Q THEN		
							iProzess := 0;
							CheckTimer(IN := FALSE);
							bFehler := TRUE;
							iFehlerID := 201;
						END_IF
					END_CASE
				
				//______________________________________________________________________________________________________	
				3:	// Grifer komplett schliessen
					CASE iProzess OF 
					0: // Aktion durchführen
						iPos := 200;	
						iGeschw := 100;
						iKraft := 0;
						
							bGestartet := A_PositionAnfahren(iPos := iPos, iGeschw := iGeschw, iKraft := iKraft);
					
						IF bGestartet THEN
							bGestartet := FALSE;
							Delay(IN:= TRUE, PT := T#1S);
						END_IF
						
						IF Delay.Q THEN
							Delay(IN:= FALSE);
							iProzess := 1;
						END_IF
						
						IF Communication.BUSY THEN
							Check1 := TRUE;
						ELSE
							Check1 := TRUE;
						END_IF
					
					1: // Prüfen ob Aktion erledigt 
						bGreiferLesen := StatusLesen(Execute := TRUE, NrOfReg := 3);
						CheckTimer(IN := TRUE, PT := T#5S);
						
						IF bGreiferLesen THEN
							bGreiferLesen := FALSE;
							StatusLesen(Execute := FALSE, NrOfReg := 3);
							
							// Greifer ist in Hinderniss gefahren
							IF 	DataRead[0] = 0 		AND
								DataRead[1] = 249 		AND
								DataRead[3] = 0 		AND
								DataRead[4] = 0 		THEN
								
								CheckTimer(IN := FALSE);
								iProzess := 0;
								bObjektFertig := TRUE;								
							END_IF
							
						END_IF
						
						IF Communication.BUSY THEN
							Check2 := TRUE;
						ELSE
							Check2 := TRUE;
						END_IF
						
						// Zeit wurde überschritten
						IF CheckTimer.Q THEN		
							iProzess := 0;
							CheckTimer(IN := FALSE);
							bFehler := TRUE;
							iFehlerID := 201;
						END_IF
					END_CASE
					
				//______________________________________________________________________________________________________
				4: 	// Greifer komplett öffnen
					CASE iProzess OF 
					0: // Aktion durchführen
						iPos := 0;	
						iGeschw := 100;
						iKraft := 100;
						
						bGestartet := A_PositionAnfahren(iPos := iPos, iGeschw := iGeschw, iKraft := iKraft);
		
						
						IF bGestartet THEN
							bGestartet := FALSE;
							Delay(IN:= TRUE, PT := T#1S);
						END_IF
						
						IF Delay.Q THEN
							Delay(IN:= FALSE);
							iProzess := 1;
						END_IF
						
						IF Communication.BUSY THEN
							Check3 := TRUE;
						ELSE
							Check3 := TRUE;
						END_IF
					
					
					1: // Prüfen ob Aktion erledigt 
						bGreiferLesen := StatusLesen(Execute := TRUE, NrOfReg := 3);
						
						CheckTimer(IN := TRUE, PT := T#5S);
						
						IF bGreiferLesen THEN
							bGreiferLesen := FALSE;
							StatusLesen(Execute := FALSE, NrOfReg := 3);
							
							// Greifer hat Position erreicht
							IF 	DataRead[0] = 0 		AND
								DataRead[1] = 249 		AND
								DataRead[2] = 0 		AND
								DataRead[3] = 0 		AND
								DataRead[4] = 0 		THEN
								
								CheckTimer(IN := FALSE);
								iProzess := 0;
								bObjektFertig := TRUE;
							END_IF
							
							// Greifer ist in Hinderniss gefahren
							IF 	DataRead[0] = 0 		AND
								DataRead[1] = 185 		AND
								DataRead[3] = 0 		AND
								DataRead[4] = 0 		THEN
								
								CheckTimer(IN := FALSE);
								iProzess := 0;
								bFehler := TRUE;
								iFehlerID := 202;
							END_IF
							
							IF Communication.BUSY THEN
							Check4 := TRUE;
						ELSE
							Check4 := TRUE;
						END_IF
					
							
						END_IF
						
						// Zeit wurde überschritten
						IF CheckTimer.Q THEN		
							iProzess := 0;
							CheckTimer(IN := FALSE);
							bFehler := TRUE;
							iFehlerID := 201;
						END_IF
					END_CASE
			END_CASE			
		
		// TRANSITION
			IF bObjektFertig THEN
				bObjektFertig := FALSE;
				bBusy := FALSE;
				iState := 4;
			END_IF
			
			IF bStoppen THEN	
				
				IF bSkillFertig THEN
					iState := 5;
				END_IF
					
				IF bStoppen THEN
					iState := 6;
				END_IF
					
			END_IF
	
	//____________________________________________________________________________________________
	4: // ABGESCHLOSSEN_INTERN
		// DO
			bDone := TRUE;
		
		// TRANSITION
			IF bResettenSkill THEN																	// Objekt resetten		
				bDone := FALSE;
				iState := 1;
			END_IF
	//____________________________________________________________________________________________
	5: // ABGESCHLOSSEN_EXTERN
		// DO																					
			bDone := TRUE;
		
		// TRANSITION
			IF bResettenSkill THEN																	// Objekt resetten
				bDone := FALSE;
				iState := 1;
			END_IF
	
	//____________________________________________________________________________________________
	6: // GESTOPPT
		// DO
			bBusy := FALSE;
		
		// TRANSITION
			IF bResettenSystem THEN																	// Objekt resetten
				iState := 1;
			END_IF
	
	//____________________________________________________________________________________________
	7: // FEHLER
		// DO
			bDone := FALSE;
			bBusy := FALSE;
			bError := bFehler;
			iErrorID := iFehlerID;
			
		// TRANSITION
			IF bResettenSystem THEN																	// Objekt resetten
				bFehler	 := FALSE;
				bError := FALSE;
				iErrorID := 0;
				iState := 1;
			END_IF
	
END_CASE]]></ST>
    </Implementation>
    <Folder Name="01_Methoden" Id="{8bef1fce-a79d-491b-85eb-292f85243fd3}">
      <Folder Name="01_Nicht-Funktional" Id="{d247bbb4-617a-459b-8e80-d559cc2f4de6}" />
      <Folder Name="02_Funktional" Id="{74d4df1c-6e30-4536-b2f1-c81690cd4243}">
        <Folder Name="01_Manuell" Id="{da97d29d-50d9-424b-8fc5-8ee0f9e12497}" />
        <Folder Name="02_Automatik" Id="{9dd68ca4-539b-4a90-b9cb-27a2a4d76558}" />
      </Folder>
    </Folder>
    <Folder Name="02_Eigenschaften" Id="{472bcf55-ae01-4684-b0a5-1bac4ac8db73}" />
    <Method Name="A_PositionAnfahren" Id="{4c569e10-c6ef-4410-b884-6fe27f9c3446}" FolderPath="01_Methoden\02_Funktional\02_Automatik\">
      <Declaration><![CDATA[METHOD A_PositionAnfahren : BOOL
VAR_INPUT
	iPos		:BYTE;
	iGeschw		:BYTE;
	iKraft		:BYTE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Definieren der Anzahl von Daten-Bytes 
Quantity := 3;

// Definieren von Register
MBAddr := 1000;

// Definieren der Daten
DataSend[0] := 0;
DataSend[1] := 9;
DataSend[2] := iPos;
DataSend[3] := 0;
DataSend[4] := iKraft;
DataSend[5] := iGeschw;

// Senden von Daten an entsprechendes Register
Communication.WriteRegs(
	UnitID 		:= UnitID,
	Quantity 	:= Quantity,
	MBAddr 		:= MBAddr,
	cbLength 	:= SIZEOF(DataSend),
	pMemoryAddr := ADR(DataSend),
	Execute 	:= TRUE,
	Timeout 	:= Timeout,
	BUSY 		=> bBusy,
	Error 		=> bError,
	ErrorId 	=> iErrorID,
	cbRead 		=> cbRead);
	
IF NOT Communication.BUSY THEN
	bBusy := FALSE;
	Communication.WriteRegs(Execute := FALSE);
	A_PositionAnfahren := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Aktivieren" Id="{fdd6e674-7a95-46dd-b35c-bacfce641df0}" FolderPath="01_Methoden\01_Nicht-Funktional\">
      <Declaration><![CDATA[METHOD Aktivieren : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Definieren der Anzahl von Daten-Bytes 
Quantity := 3;

// Definieren von Register
MBAddr := 1000;

// Definieren der Daten
DataSend[0] := 0;
DataSend[1] := 1;
DataSend[2] := 0;
DataSend[3] := 0;
DataSend[4] := 0;
DataSend[5] := 0;

// Senden von Daten an entsprechendes Register
Communication.WriteRegs(
	UnitID 		:= UnitID,
	Quantity 	:= Quantity,
	MBAddr 		:= MBAddr,
	cbLength 	:= SIZEOF(DataSend),
	pMemoryAddr := ADR(DataSend),
	Execute 	:= TRUE,
	Timeout 	:= Timeout,
	BUSY 		=> bBusy,
	Error 		=> bError,
	ErrorId 	=> iErrorID,
	cbRead 		=> cbRead);
	
IF NOT Communication.BUSY THEN
	bBusy := FALSE;
	Communication.WriteRegs(Execute := FALSE);
	Aktivieren := TRUE;
END_IF
	
	]]></ST>
      </Implementation>
    </Method>
    <Property Name="AnschlagPos" Id="{8a7e5113-77a4-41bd-b1e7-c17073d70e06}" FolderPath="02_Eigenschaften\">
      <Declaration><![CDATA[PROPERTY AnschlagPos : BYTE]]></Declaration>
      <Get Name="Get" Id="{b513f4bb-ed8d-44a8-b856-243be0953fc4}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[AnschlagPos := Anschlag;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Resetten" Id="{6c37f541-f851-4216-a3b1-3d989b5fbdc7}" FolderPath="01_Methoden\01_Nicht-Funktional\">
      <Declaration><![CDATA[METHOD Resetten : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Definieren der Anzahl von Daten-Bytes 
Quantity := 3;

// Definieren von Register
MBAddr := 1000;

// Definieren der Daten
DataSend[0] := 0;
DataSend[1] := 0;
DataSend[2] := 0;
DataSend[3] := 0;
DataSend[4] := 0;
DataSend[5] := 0;

// Senden von Daten an entsprechendes Register
Communication.WriteRegs(
	UnitID 		:= UnitID,
	Quantity 	:= Quantity,
	MBAddr 		:= MBAddr,
	cbLength 	:= SIZEOF(DataSend),
	pMemoryAddr := ADR(DataSend),
	Execute 	:= TRUE,
	Timeout 	:= Timeout,
	BUSY 		=> bBusy,
	Error 		=> bError,
	ErrorId 	=> iErrorID,
	cbRead 		=> cbRead);
	
IF Communication.BUSY  THEN
	bBusy := FALSE;
	Communication.WriteRegs(Execute := FALSE);
	Resetten := TRUE;
END_IF
	]]></ST>
      </Implementation>
    </Method>
    <Method Name="StatusLesen" Id="{3212b8cc-f492-4878-ad07-ac83bcec30d8}" FolderPath="01_Methoden\01_Nicht-Funktional\">
      <Declaration><![CDATA[METHOD StatusLesen : BOOL
VAR_INPUT
	Execute			:BOOL;
	NrOfReg			:WORD;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Definieren von Register
MBAddr := 2000;


// Lesen von Daten des entsprechenden Registers
Communication.ReadRegs(
	UnitID 		:= UnitID,
	Quantity 	:= NrOfReg,
	MBAddr 		:= MBAddr,
	cbLength 	:= SIZEOF(DataRead),
	pMemoryAddr := ADR(DataRead),
	Execute 	:= Execute,
	Timeout 	:= Timeout,
	BUSY 		=> bBusy,
	Error 		=> bError,
	ErrorId 	=> iErrorID,
	cbRead 		=> cbRead);
	
IF Communication.BUSY THEN
	bBusy := FALSE;
	StatusLesen := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>