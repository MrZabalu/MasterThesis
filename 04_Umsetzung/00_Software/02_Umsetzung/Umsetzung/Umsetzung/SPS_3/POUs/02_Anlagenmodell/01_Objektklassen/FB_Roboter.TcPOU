<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_Roboter" Id="{b1d89cdf-02d0-4c05-a2df-faff7078ad0e}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Roboter IMPLEMENTS I_Objekt_Roboter
VAR_INPUT
	// Betriebsvariablen
	eSysState			:eSystemState;		// Information über Stand von System
	eSysCommand		  	:eSystemCommand;	// Steuerungsvariabel von System
	iMode				:INT;				// Information über aktuellen Betriebsmodi 
	
	
	// Kommunikationsvariablen
	sIP						:T_IPv4Addr;
	iPort_Prim				:UINT;
	iPort_RT				:UINT;
END_VAR

VAR_OUTPUT
	iErrorID			:UDINT;				// Information um welchen Fehler es sich handelt	
END_VAR

VAR
	
	iState				:eObjectAktorState;		// Information über Zustand von Objekt
	
	
	// Zustandsvariablen
	bEinschalten			:BOOL;			// Objekt einschalten
	bAusschalten			:BOOL;			// Objekt ausschalten
 	bStarten				:BOOL;			// Objekt starten
	bObjektFertig			:BOOL;			// Objekt hat Prozess abgeschlossen
	bSkillFertig			:BOOL;			// Skill hat Prozess abgeschlossen
	bStoppen				:BOOL;			// Objekt wurde gestoppt
	bResettenSkill			:BOOL;			// Das Objekt wird durch den Skill resettet
	bResettenSystem			:BOOL;			// Das Objekt wird durch das System resettet 
	bFehler					:BOOL;			// Das Objket hat einen Fehler
	
	iFehlerID				:UDINT;

	// Instanziierung von Kommunikationsbausteine
	Connect					:FB_SocketConnect;
	Disconnect				:FB_SocketCloseALL;
	Send_START				:FB_SocketSend;
	Send_STOP				:FB_SocketSend;
	Connect_RT				:FB_SocketConnect;
	Receive_RT				:FB_SocketReceive;
	Disconnect_RT			:FB_SocketClose;
	
	// Kommunikationsvariablen
	sSrvNetId   			:T_AmsNetId := '';
	tTimeout    			:TIME := T#45S;(*!!!*)
	hSocket    				:T_HSOCKET;
	hSocket_RT    			:T_HSOCKET;
	
	// Managementvariablen
	bEingeschalten 			:BOOL;
	bAusgeschalten			:BOOL;
	bAmStarten				:BOOL;
	bGestartet				:BOOL;
	bAmStoppen				:BOOL;
	bGestoppt				:BOOL;
	
	bStopCommand			:BOOL;
	bTurnedOn 				:BOOL;
	
	bBewegungStoppen		:BOOL;
	
	Delay_1					:TON;
	Execute_TON1			:BOOL;
	Delay_2					:TON;
	
	bQ1						:BOOL;
	bQ2						:BOOL;
	bQ3						:BOOL;
	bQ4						:BOOL;
	bQ5						:BOOL;
	bQ6						:BOOL;
	
	bVQ1					:BOOL;
	bVQ2					:BOOL;
	bVQ3					:BOOL;
	bVQ4					:BOOL;
	bVQ5					:BOOL;
	bVQ6					:BOOL;
	
	// RealTimeDatenerfassung
	RT_State				:INT;							// RealTime-State-Variable
	ReceivedData			:sRealTimedata;					// Erhaltene Daten von Roboter
	nRecBytes				:UDINT;							// Anzahl der erhaltenen Bytes
	
	JointPositions			:sPositionValues;				// Ausgelesene aktuelle Joint-Positonen-Byte
	JointSpeed				:sPositionValues;				// Ausgelesene aktuelle Joint-Geschwindigkeit-Byte
	ToolPosition			:sPositionValues;				// Ausgelesene aktuelle Tool-Positonen-Byte
	
	TempJointPosRev			:sPositionArrays;				// Ausgelesene aktuelle Joint-Positonen-Byte (Reversed)
	TempJointVRev			:sPositionArrays;				// Ausgelesene aktuelle Joint-Geschwindigkeit-Byte (Reversed)	
	TempToolPosRev			:sPositionArrays;				// Ausgelesene aktuelle Tool-Positonen-Byte(Reversed)
	
	Joint					:Array8_LReal;					// Aktuelle Joint-Positonen
	JSpeed					:Array8_LReal;					// Aktuelle Joint-Geschwindgeit
	Tool					:Array8_LReal;					// Aktuelle Tool-Positionen
	m						:INT;							// Loop-Variable
	
	// Prozessdaten
	TargetPosition			:sPositionValues;				// Targetpositions
	bSetValues				:BOOL;							// Definiert ob Targetposition noch ermittelt werden muss
	Prozessvariablen		:sRoboterProzessVariablen;
	
	Count 					:INT;
	Test					:sRoboterProzessVariablen;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Instanziierungen
	Connect_RT(sSrvNetId := sSrvNetId,
							sRemoteHost := sIP,
							nRemotePort := iPort_RT,
							tTimeout := tTimeout,
							bError => bFehler,
							nErrId => iErrorID,
							hSocket => hSocket_RT);	
							
	Send_START(sSrvNetId := sSrvNetId,
			hSocket := hSocket,
			tTimeout := tTimeout,
			bError => bFehler,
			nErrId => iErrorID);
	Send_STOP(sSrvNetId := sSrvNetId,
			hSocket := hSocket,
			tTimeout := tTimeout,
			bError => bFehler,
			nErrId => iErrorID);
							
	Receive_RT(sSrvNetId := sSrvNetId,
							hSocket := hSocket_RT,
							cbLen := SIZEOF(ReceivedData),
							pDest := ADR(ReceivedData),
							tTimeout := tTimeout,
							bError => bFehler,
							nErrId => iErrorID,
							nRecBytes => nRecBytes);
							
	Disconnect_RT(sSrvNetId := sSrvNetId,
							hSocket := hSocket_RT,
							tTimeout := tTimeout,
							bError => bFehler,
							nErrId => iErrorID);
	
	Delay_1(IN := Execute_TON1, PT := T#3MS);

//____________________________________________________________________________________________
// Input-Command-Verwaltung
	// System
	IF eSysCommand = 2 AND iState = 0 THEN			// Objekt einschalten
		bEinschalten := TRUE;
	ELSE 
		bEinschalten := FALSE;
	END_IF
	
	IF eSysCommand = 1 AND iState = 1 THEN			// Objekt ausschalten
		bAusschalten := TRUE;		
	ELSE 
		bAusschalten := FALSE;		
	END_IF
	
	IF eSysCommand = 3 THEN							// Objekt beendet Prozess
		bStoppen := TRUE;
	ELSE
		bStoppen := FALSE;
	END_IF
	
	IF eSysCommand = 4 THEN							// System resettet Objekt
		bResettenSystem := TRUE;
	ELSE
		bResettenSystem := FALSE;
	END_IF
	
	
//____________________________________________________________________________________________
// Interner Methodenaufruf (Durch System oder Skill)
IF bEinschalten THEN
	bEingeschalten := M_Verbinden();
	bTurnedOn := TRUE;
ELSE 
	bEingeschalten := FALSE;
END_IF

IF bAusschalten THEN
	bAusgeschalten := M_Trennen();
	bTurnedOn := FALSE;
	RT_State := 0;
ELSE 
	bAusgeschalten := FALSE;
END_IF

//____________________________________________________________________________________________
// Datenerfassungsprozess
IF bTurnedOn THEN
	CASE RT_State OF 
		0:	// Connect to RealTimePort
				Connect_RT(bExecute := TRUE);			
					
				IF NOT Connect_RT.bBusy AND NOT Connect_RT.bError THEN
					Connect_RT.bExecute := FALSE;
					RT_State := 1;
				END_IF
		
		1:	// Get Data 
				Receive_RT(bExecute := TRUE);
			
				IF NOT Receive_RT.bBusy AND NOT Receive_RT.bError THEN
					Receive_RT.bExecute := FALSE;
					RT_State := 2;
				END_IF
				
		2:	// Use Data
				m := 0;
		
				// Reverse Array
				FOR m := 0 TO 7 DO
					TempJointPosRev.q1[m] := ReceivedData.qActualQ1[7 - m];
					TempJointPosRev.q2[m] := ReceivedData.qActualQ2[7 - m];
					TempJointPosRev.q3[m] := ReceivedData.qActualQ3[7 - m];
					TempJointPosRev.q4[m] := ReceivedData.qActualQ4[7 - m];
					TempJointPosRev.q5[m] := ReceivedData.qActualQ5[7 - m];
					TempJointPosRev.q6[m] := ReceivedData.qActualQ6[7 - m];
					
					TempJointVRev.q1[m] := ReceivedData.qdActualQ1[7 - m];
					TempJointVRev.q2[m] := ReceivedData.qdActualQ2[7 - m];
					TempJointVRev.q3[m] := ReceivedData.qdActualQ3[7 - m];
					TempJointVRev.q4[m] := ReceivedData.qdActualQ4[7 - m];
					TempJointVRev.q5[m] := ReceivedData.qdActualQ5[7 - m];
					TempJointVRev.q6[m] := ReceivedData.qdActualQ6[7 - m];
					
					TempToolPosRev.q1[m] := ReceivedData.toolVectorQ1[7 - m];
					TempToolPosRev.q2[m] := ReceivedData.toolVectorQ2[7 - m];
					TempToolPosRev.q3[m] := ReceivedData.toolVectorQ3[7 - m];
					TempToolPosRev.q4[m] := ReceivedData.toolVectorQ4[7 - m];
					TempToolPosRev.q5[m] := ReceivedData.toolVectorQ5[7 - m];
					TempToolPosRev.q6[m] := ReceivedData.toolVectorQ6[7 - m];
				END_FOR
			
				Joint.arrByte := TempJointPosRev.q1;
				JointPositions.q1 := RAD_TO_DEG(Joint.rValue);
				Joint.arrByte := TempJointPosRev.q2;
				JointPositions.q2 := RAD_TO_DEG(Joint.rValue);
				Joint.arrByte := TempJointPosRev.q3;
				JointPositions.q3 := RAD_TO_DEG(Joint.rValue);
				Joint.arrByte := TempJointPosRev.q4;
				JointPositions.q4 := RAD_TO_DEG(Joint.rValue);
				Joint.arrByte := TempJointPosRev.q5;
				JointPositions.q5 := RAD_TO_DEG(Joint.rValue);
				Joint.arrByte := TempJointPosRev.q6;
				JointPositions.q6 := RAD_TO_DEG(Joint.rValue);
				
				JSpeed.arrByte := TempJointVRev.q1;
				JointSpeed.q1 := JSpeed.rValue;
				JSpeed.arrByte := TempJointVRev.q2;
				JointSpeed.q2 := JSpeed.rValue;
				JSpeed.arrByte := TempJointVRev.q3;
				JointSpeed.q3 := JSpeed.rValue;
				JSpeed.arrByte := TempJointVRev.q4;
				JointSpeed.q4 := JSpeed.rValue;
				JSpeed.arrByte := TempJointVRev.q5;
				JointSpeed.q5 := JSpeed.rValue;
				JSpeed.arrByte := TempJointVRev.q6;
				JointSpeed.q6 := JSpeed.rValue;
				
				Tool.arrByte := TempToolPosRev.q1;
				ToolPosition.q1 := Tool.rValue;
				Tool.arrByte := TempToolPosRev.q2;
				ToolPosition.q2 := Tool.rValue;
				Tool.arrByte := TempToolPosRev.q3;
				ToolPosition.q3 := Tool.rValue;
				Tool.arrByte := TempToolPosRev.q4;
				ToolPosition.q4 := RAD_TO_DEG(Tool.rValue);
				Tool.arrByte := TempToolPosRev.q5;
				ToolPosition.q5 := RAD_TO_DEG(Tool.rValue);
				Tool.arrByte := TempToolPosRev.q6;
				ToolPosition.q6 := RAD_TO_DEG(Tool.rValue);
				
				Delay_2(IN := TRUE, PT := T#0.5S);
				IF Delay_2.Q THEN
					Delay_2(IN := FALSE);
					RT_State := 3;
				END_IF
				
		3:	// Disconnect from RealTimePort
				Disconnect_RT(bExecute := TRUE);
							
				IF NOT Disconnect_RT.bBusy AND NOT Disconnect_RT.bError THEN
					Disconnect_RT.bExecute := FALSE;
					RT_State := 0;
				END_IF
		
	END_CASE
END_IF
//____________________________________________________________________________________________
// Zustandsmanagement

IF bFehler THEN 
	iState := 7;
END_IF

CASE iState OF 
	0: // AUS
		// DO
		
		// TRANSITION
			IF bEingeschalten THEN																	// Verbindung wird aufgebaut
				iState := 1;
			END_IF
			
	//____________________________________________________________________________________________
	1: // BEREIT
		// DO
			IF bStarten THEN
				bAmStarten := M_BewegungZuPosition();
				bStarten := FALSE;
			END_IF
			
			IF bAmStarten  THEN
				bAmStarten := FALSE;
				Execute_TON1 := TRUE;		 
			END_IF
			
			IF Delay_1.Q THEN
				Execute_TON1 := FALSE;
				bGestartet := TRUE;
			END_IF
		
		// TRANSITION
			IF bAusgeschalten THEN																	// Verbindung wird getrennt
				iState := 0;
			END_IF
			
																									// Manuell-Modus wird eingeschalten
													
			 IF bGestartet THEN																		// Objekt führt Prozessdurch
				 bGestartet := FALSE;
				 iState := 3;
			 END_IF			
	//____________________________________________________________________________________________
	2: // MANUELL
		// DO
		
		// TRANSITION
	
	//____________________________________________________________________________________________
	3: // LAUFEND
		// DO
			
			// Ermitteln von TargetPosition 
			IF NOT bSetvalues THEN
				// Kartesisch
				IF Prozessvariablen.MoveTyp = 0 OR Prozessvariablen.MoveTyp = 3 THEN
					// Absolut
					IF Prozessvariablen.PosTyp = 0 THEN
						TargetPosition.q1 := Prozessvariablen.q1;
						TargetPosition.q2 := Prozessvariablen.q2;
						TargetPosition.q3 := Prozessvariablen.q3;
						TargetPosition.q4 := Prozessvariablen.q4;
						TargetPosition.q5 := Prozessvariablen.q5;
						TargetPosition.q6 := Prozessvariablen.q6;		
					END_IF
										
					// Relativ
					IF Prozessvariablen.PosTyp = 1 THEN
						TargetPosition.q1 := ToolPosition.q1 + Prozessvariablen.q1;
						TargetPosition.q2 := ToolPosition.q2 + Prozessvariablen.q2;
						TargetPosition.q3 := ToolPosition.q3 + Prozessvariablen.q3;
						TargetPosition.q4 := ToolPosition.q4 + Prozessvariablen.q4;
						TargetPosition.q5 := ToolPosition.q5 + Prozessvariablen.q5;
						TargetPosition.q6 := ToolPosition.q6 + Prozessvariablen.q6;
					END_IF
					
				END_IF
				
				// Gelenkwinkel
				IF Prozessvariablen.MoveTyp = 1 THEN
					TargetPosition.q1 := Prozessvariablen.q1;
					TargetPosition.q2 := Prozessvariablen.q2;
					TargetPosition.q3 := Prozessvariablen.q3;
					TargetPosition.q4 := Prozessvariablen.q4;
					TargetPosition.q5 := Prozessvariablen.q5;
					TargetPosition.q6 := Prozessvariablen.q6;	
				END_IF
			
				bSetvalues := TRUE;
			END_IF

			// Vergleich zwischen IST und SOLL
			// Kartesisch
			IF Prozessvariablen.MoveTyp = 0 OR Prozessvariablen.MoveTyp = 3 THEN
				IF ABS(ABS(TargetPosition.q1) - ABS(ToolPosition.q1)) < 0.001 THEN
					bQ1 := TRUE;
				END_IF
				
				IF ABS(ABS(TargetPosition.q2) - ABS(ToolPosition.q2)) < 0.001 THEN
					bQ2 := TRUE;
				END_IF
				
				IF ABS(ABS(TargetPosition.q3) - ABS(ToolPosition.q3)) < 0.001 THEN
					bQ3 := TRUE;
				END_IF
				
				IF ABS(ABS(TargetPosition.q4) - ABS(ToolPosition.q4)) < 1 THEN
					bQ4 := TRUE;
				END_IF
				
				IF ABS(ABS(TargetPosition.q5) - ABS(ToolPosition.q5)) < 1 THEN
					bQ5 := TRUE;
				END_IF
				
				IF ABS(ABS(TargetPosition.q6) - ABS(ToolPosition.q6)) < 1 THEN
					bQ6 := TRUE;
				END_IF
			END_IF
			
			// Gelenkwinkel
			IF Prozessvariablen.MoveTyp = 1 THEN
				IF ABS(TargetPosition.q1) - ABS(JointPositions.q1) < 0.1 THEN
					bQ1 := TRUE;
				END_IF
				
				IF ABS(TargetPosition.q2) - ABS(JointPositions.q2) < 0.1 THEN
					bQ2 := TRUE;
				END_IF
				
				IF ABS(TargetPosition.q3) - ABS(JointPositions.q3) < 0.1 THEN
					bQ3 := TRUE;
				END_IF
				
				IF ABS(TargetPosition.q4) - ABS(JointPositions.q4) < 0.1 THEN
					bQ4 := TRUE;
				END_IF
				
				IF ABS(TargetPosition.q5) - ABS(JointPositions.q5) < 0.1 THEN
					bQ5 := TRUE;
				END_IF
				
				IF ABS(TargetPosition.q6) - ABS(JointPositions.q6) < 0.1 THEN
					bQ6 := TRUE;
				END_IF
			END_IF
			
			// Objekt schliessen Prozess ab
			IF bQ1 AND bQ2 AND bQ3 AND bQ4 AND bQ5 AND bQ6 THEN										// Abgeschlossener Prozess
				
				bQ1 := FALSE;
				bQ2 := FALSE;
				bQ3 := FALSE;
				bQ4 := FALSE;
				bQ5 := FALSE;
				bQ6 := FALSE;
				
				bObjektFertig := TRUE;
			END_IF
			
				
			// Objekt wird gestoppt durch Skill
			IF bSkillFertig THEN
				
				bQ1 := FALSE;
				bQ2 := FALSE;
				bQ3 := FALSE;
				bQ4 := FALSE;
				bQ5 := FALSE;
				bQ6 := FALSE;
				bSetvalues := FALSE;
				
				bBewegungStoppen := M_BewegungStoppen();
				
				IF bBewegungStoppen THEN
					bBewegungStoppen := FALSE;
					bAmStoppen := TRUE;
				END_IF
			END_IF 
			
			// Objekt wird gestoppt durch System
			IF bStoppen THEN
				
				bQ1 := FALSE;
				bQ2 := FALSE;
				bQ3 := FALSE;
				bQ4 := FALSE;
				bQ5 := FALSE;
				bQ6 := FALSE;
				bSetvalues := FALSE;
				
				bBewegungStoppen := M_BewegungStoppen();
				
				IF bBewegungStoppen THEN
					bBewegungStoppen := FALSE;
					bAmStoppen := TRUE;
				END_IF
			END_IF 
			
			// Stoppprozess
			IF bAmStoppen THEN
				IF JointSpeed.q1 < 0.001 THEN
					bVQ1 := TRUE;
				END_IF
				
				IF JointSpeed.q2 < 0.001 THEN
					bVQ2 := TRUE;
				END_IF
				
				IF JointSpeed.q3 < 0.001 THEN
					bVQ3 := TRUE;
				END_IF
				
				IF JointSpeed.q4 < 0.001 THEN
					bVQ4 := TRUE;
				END_IF
				
				IF JointSpeed.q5 < 0.001 THEN
					bVQ5 := TRUE;
				END_IF
				
				IF JointSpeed.q6 < 0.001 THEN
					bVQ6 := TRUE;
				END_IF
				
				IF bVQ1 AND bVQ2 AND bVQ3 AND bVQ4 AND bVQ5 AND bVQ6 THEN							// Gestoppter Prozess
					bVQ1 := FALSE;	
					bVQ2 := FALSE;	
					bVQ3 := FALSE;	
					bVQ4 := FALSE;	
					bVQ5 := FALSE;	
					bVQ6 := FALSE;	
					
					bAmStoppen := FALSE;
					bGestoppt := TRUE;
					
				END_IF
				
			END_IF
		
		// TRANSITION
			IF bObjektFertig THEN
				bObjektFertig := FALSE;
				bSetvalues := FALSE;
				iState := 4;
			END_IF
			
			IF bGestoppt THEN	
				bGestoppt := FALSE;
				bStopCommand := FALSE;
				
				IF bSkillFertig THEN
					bSkillFertig := FALSE;
					iState := 5;
				END_IF
					
				IF bStoppen THEN
					iState := 6;
				END_IF
					
			END_IF
	
	//____________________________________________________________________________________________
	4: // ABGESCHLOSSEN_INTERN
		// DO
		
		// TRANSITION
			IF bResettenSkill THEN																	// Objekt resetten	
				iState := 1;
			END_IF
	//____________________________________________________________________________________________
	5: // ABGESCHLOSSEN_EXTERN
		// DO																					
		
		// TRANSITION
			IF bResettenSkill THEN																	// Objekt resetten
				iState := 1;
			END_IF
	
	//____________________________________________________________________________________________
	6: // GESTOPPT
		// DO
		
		// TRANSITION
			IF bResettenSystem THEN																	// Objekt resetten
				iState := 1;
			END_IF
	
	//____________________________________________________________________________________________
	7: // FEHLER
		// DO
			
		// TRANSITION
			IF bResettenSystem THEN																	// Objekt resetten
				bFehler	 := FALSE;
				iState := 1;
			END_IF
END_CASE]]></ST>
    </Implementation>
    <Folder Name="01_Steuerungsmethoden" Id="{8fb77c7e-29e2-4d20-98b6-2f89908aee7c}" />
    <Folder Name="02_Steuerungseigenschaften" Id="{23cda8bd-0900-482a-81e6-fa5b0afa026a}" />
    <Folder Name="03_Prozessmethoden" Id="{edf64f9b-1329-4b52-9cd3-6cbe839a61b0}" />
    <Folder Name="04_Prozesseigenschaften" Id="{cd6a7cfd-8be9-4934-9fbe-0a5411bf3b7c}" />
    <Method Name="M_BewegungStoppen" Id="{8e13dedf-17aa-4b25-b618-df8e7f4e1740}" FolderPath="03_Prozessmethoden\">
      <Declaration><![CDATA[METHOD M_BewegungStoppen : BOOL
VAR_INPUT
END_VAR
VAR
	stringFormat   		:FB_FormatString;		// Funktion für Stringerstellung	
	a					:INT := 2;

	Command				:T_MaxString;			// Commandstring
	CommandArray		:String_Array256;		// Byte-Array für Kommunikation mit Roboter
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[stringFormat(sFormat := 'stopj(%d)',
							arg1 := F_INT(a),
							bError => bFehler,
							nErrId => iErrorID,
							sOut => Command);	
							
// VOrbereiten von Array 
	CommandArray.sValue := Command;
	CommandArray.arrByte[LEN(CommandArray.sValue)] := 10;
	
// Senden von Array
	IF NOT bStopCommand THEN
		Send_STOP(cbLen := LEN(CommandArray.sValue),
			pSrc := ADR(CommandArray.arrByte),
			bExecute := TRUE);
			
		Count := Count + 1;
		bStopCommand := TRUE;
	END_IF
			
	IF NOT Send_STOP.bBusy THEN
		Send_STOP(bExecute := FALSE);
		M_BewegungStoppen := TRUE;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_BewegungZuPosition" Id="{85419e8d-a2b5-49d3-8725-f8da8369aeb7}" FolderPath="03_Prozessmethoden\">
      <Declaration><![CDATA[METHOD M_BewegungZuPosition : BOOL
VAR 
	
	x					:LREAL;				// X-Koordinate
	y					:LREAL;				// Y-Koordinate
	z					:LREAL;				// Z-Koordinate
	rx					:LREAL;				// Orintierung um X-Achse
	ry					:LREAL;				// Orientierung um Y-Achse
	rz					:LREAL;				// Orientierung um Z-Achse
	
	q1					:LREAL;				// Joint-Position 1
	q2					:LREAL;				// Joint-Position 2
	q3					:LREAL;				// Joint-Position 3
	q4					:LREAL;				// Joint-Position 4
	q5					:LREAL;				// Joint-Position 5
	q6					:LREAL;				// Joint-Position 6

	stringFormat   : FB_FormatString;		// Funktion für Stringerstellung

	pose			:T_MaxString;			// Positionsstring
	Command			:T_MaxString;			// Commandstring
	
	CommandArray	:String_Array256;			// Byte-Array für Kommunikation mit Roboter
	
END_VAR
VAR_INPUT
	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Einfluss von Positionart
	IF Prozessvariablen.PosTyp = 1 THEN		// Relative Bewegung
		
		x := ToolPosition.q1 + Prozessvariablen.q1;
		y := ToolPosition.q2 + Prozessvariablen.q2;
		z := ToolPosition.q3 + Prozessvariablen.q3;
		rx := DEG_TO_RAD(ToolPosition.q4 + Prozessvariablen.q4);
		ry := DEG_TO_RAD(ToolPosition.q5 + Prozessvariablen.q5);
		rz := DEG_TO_RAD(ToolPosition.q6 + Prozessvariablen.q6);
		
	END_IF
	
	IF Prozessvariablen.PosTyp = 0 THEN		// Absolute Bewegung
		
		x := Prozessvariablen.q1;
		y := Prozessvariablen.q2;
		z := Prozessvariablen.q3;
		rx := DEG_TO_RAD(Prozessvariablen.q4);
		ry := DEG_TO_RAD(Prozessvariablen.q5);
		rz := DEG_TO_RAD(Prozessvariablen.q6);
		
	END_IF
	
	stringFormat(sFormat := 'p[%.3f,%.3f,%.3f,%.3f,%.3f,%.3f]',
			arg1 := F_LREAL(x),
			arg2 := F_LREAL(y),
			arg3 := F_LREAL(z),
			arg4 := F_LREAL(rx),
			arg5 := F_LREAL(ry),
			arg6 := F_LREAL(rz),
			bError => bFehler,
			nErrId => iErrorID,
			sOut => pose);

// Einlfuss von Bewegungsart
	IF Prozessvariablen.MoveTyp = 0 THEN			// Move to position (linear in tool-space)
													// movel(pose, a=1.2, v=0.25, t=0, r=0)
		stringFormat(sFormat := 'movel(%s, a=%.2f, v=%.2f)',
							arg1 := F_STRING(pose),
							arg2 := F_LREAL(Prozessvariablen.a),
							arg3 := F_LREAL(Prozessvariablen.v),
							bError => bFehler,
							nErrId => iErrorID,
							sOut => Command);											
	END_IF
	
	IF Prozessvariablen.MoveTyp = 1 THEN			// Move to position (linear in joint-space)
													// movej(q, a=1.4, v=1.05, t=0, r =0)
		q1 := DEG_TO_RAD(Prozessvariablen.q1);
		q2 := DEG_TO_RAD(Prozessvariablen.q2);
		q3 := DEG_TO_RAD(Prozessvariablen.q3);
		q4 := DEG_TO_RAD(Prozessvariablen.q4);
		q5 := DEG_TO_RAD(Prozessvariablen.q5);
		q6 := DEG_TO_RAD(Prozessvariablen.q6);
		
		stringFormat(sFormat := 'movej([%.3f,%.3f,%.3f,%.3f,%.3f,%.3f], a=%.2f, v=%.2f)',
							arg1 := F_LREAL(q1),
							arg2 := F_LREAL(q2),
							arg3 := F_LREAL(q3),
							arg4 := F_LREAL(q4),
							arg5 := F_LREAL(q5),
							arg6 := F_LREAL(q6),
							arg7 := F_LREAL(Prozessvariablen.a),
							arg8 := F_LREAL(Prozessvariablen.v),
							bError => bFehler,
							nErrId => iErrorID,
							sOut => Command);	
													
	END_IF
	
	IF Prozessvariablen.MoveTyp = 2 THEN			// Move Circular: Move to position (circular in tool-space)
													//movec(pose_via, pose_to, a=1.2, v=0.25, r =0, mode=0)
													
		
	END_IF
	
	IF Prozessvariablen.MoveTyp = 3 THEN			// Move Process
													// movep(pose, a=1.2, v=0.25, r=0)
		stringFormat(sFormat := 'movep(%s, a=%.2f, v=%.2f)',
							arg1 := F_STRING(pose),
							arg2 := F_LREAL(Prozessvariablen.a),
							arg3 := F_LREAL(Prozessvariablen.v),
							bError => bFehler,
							nErrId => iErrorID,
							sOut => Command);												
	END_IF

// Vorbereiten von Array
	CommandArray.sValue := Command;
	CommandArray.arrByte[LEN(CommandArray.sValue)] := 10;

// Senden von Array	
	Send_START(cbLen := LEN(CommandArray.sValue),
			pSrc := ADR(CommandArray.arrByte),
			bExecute := TRUE);
			
	IF NOT Send_START.bBusy THEN
		Send_START(bExecute := FALSE);
		M_BewegungZuPosition := TRUE;
	END_IF
	
	
						]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Reset" Id="{3523fb4b-df04-4ccd-bd04-a6627b4e3558}" FolderPath="01_Steuerungsmethoden\">
      <Declaration><![CDATA[METHOD M_Reset : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bResettenSkill := TRUE;

IF bResettenSkill THEN
	M_Reset := TRUE;
ELSE
	M_Reset := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Start" Id="{b1b9b6ea-acc3-4ab5-ac4c-e19f594cc0a4}" FolderPath="01_Steuerungsmethoden\">
      <Declaration><![CDATA[METHOD M_Start : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Prüfen von Bedingungen
	// Ist das  System im korrekten Status
	IF eSysState = 1 OR eSysState = 2 THEN
		// Ist das Objekt im korrekten Status 
		IF iState = 1 THEN
			// Prüfen auf Fehler (Muss ergänzt werden)
				bResettenSkill := FALSE;
				bStarten := TRUE;
		END_IF
	END_IF

IF bStarten THEN
	M_Start := TRUE;
ELSE
	M_Start := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Stop" Id="{cbbdd19b-cf90-4d6f-9780-915f5b573d3d}" FolderPath="01_Steuerungsmethoden\">
      <Declaration><![CDATA[METHOD M_Stop : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Ist das Objekt im korrekten Status 
	IF iState = 3 THEN
		bSkillFertig := TRUE;
	END_IF

IF bSkillFertig THEN
	M_Stop := TRUE;
ELSE
	M_Stop := FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Trennen" Id="{b8528845-9106-4be7-a716-a47eda1fc2d5}" FolderPath="03_Prozessmethoden\">
      <Declaration><![CDATA[METHOD M_Trennen : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Ausführen von Funktionalitäten
	Disconnect(sSrvNetId := sSrvNetId,
			bExecute := TRUE,
			tTimeout := tTimeout,
			bError => bFehler,
			nErrId => iErrorID);
	
	IF NOT Disconnect.bBusy AND NOT bFehler THEN
		M_Trennen := TRUE;
		Disconnect(bExecute := FALSE);
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Verbinden" Id="{b819012e-28d4-4d61-9d09-1bfa1350d7af}" FolderPath="03_Prozessmethoden\">
      <Declaration><![CDATA[METHOD M_Verbinden : BOOL 
VAR
	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Ausführen von Funktionalitäten
	Connect(sSrvNetId := sSrvNetId,
			sRemoteHost := sIP,
			nRemotePort := iPort_Prim,
			bExecute := TRUE,
			tTimeout := tTimeout,
			bError => bFehler,
			nErrId => iErrorID,
			hSocket => hSocket);
			
	IF hSocket.handle <> 0 THEN
		M_Verbinden := TRUE;
		Connect(bExecute := FALSE);
		Connect_RT(bExecute := FALSE);
	END_IF
				]]></ST>
      </Implementation>
    </Method>
    <Property Name="P_Prozessparameter" Id="{674262ad-eedf-49aa-af57-5f8b85d2b1d4}" FolderPath="04_Prozesseigenschaften\">
      <Declaration><![CDATA[PROPERTY P_Prozessparameter : sRoboterProzessVariablen]]></Declaration>
      <Set Name="Set" Id="{1fddb3df-0433-42fd-b573-7262695c8aec}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Prozessvariablen := P_Prozessparameter;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="P_State" Id="{2b35b1c1-d12b-4b07-8a8b-a10362e6b20a}" FolderPath="02_Steuerungseigenschaften\">
      <Declaration><![CDATA[PROPERTY P_State : eObjectAktorState]]></Declaration>
      <Get Name="Get" Id="{32253eef-5435-4455-9434-a3580a8c020b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_State := iState; ]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>