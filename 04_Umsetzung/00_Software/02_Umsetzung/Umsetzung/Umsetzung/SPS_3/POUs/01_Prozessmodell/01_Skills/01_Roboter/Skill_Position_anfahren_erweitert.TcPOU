<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="Skill_Position_anfahren_erweitert" Id="{20d2290a-8794-4965-a133-9ad0acf7b5f9}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Skill_Position_anfahren_erweitert	IMPLEMENTS I_Skill_RoboterErweitert
VAR_INPUT
	// Zu verwendetes Objekt
	Objekt						:I_Objekt_Roboter;	
	
	sMessdaten					:Kraftvariablen; 
	
	// Betriebsvariablen
	eSysCommand					:eSystemCommand; 						// Systembefehl an Skill
	eSysState					:eSystemState;							// Momentaner Zustand des Systems
	
END_VAR
VAR_OUTPUT
	iErrorID					:INT;									// Fehlercode für System
END_VAR
VAR
	// Managementvariablen
	iState				:eSkillState;									// Information über Zustand von Skill
	bGestartet			:BOOL;
	bGestoppt			:BOOL;
	bSkillActiv			:BOOL;
	
	// Zustandsvariablen
	bStarten			:BOOL;
	bStoppen			:BOOL;
	bObjektFertig		:BOOL;
	bErreicht			:BOOL;				
	bLimit				:BOOL;				
	bSkillFertig		:BOOL;
	bFehler				:BOOL;
	bResetten			:BOOL;
	
	// Prozessparameter
	eRoboterPos		 			:sRoboterProzessVariablen;
	sLimit						:sKraftVariablen;
	sErreicht					:sKraftVariablen;	
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Fehlerüberwachung
IF bFehler THEN
	iState := 3;
END_IF

//_______________________________________________________________
// Reaktion auf Input-Variablen:
	// Stoppen
	IF eSysCommand = 3 THEN
		bStoppen := M_Stop();
	ELSE 
		bStoppen := FALSE;
	END_IF

	// Resetten 
	IF eSysCommand = 4 THEN
		bResetten := M_Reset();
	ELSE
		bResetten := FALSE;
	END_IF
//_______________________________________________________________
// Zustandsmanagement
CASE iState OF 
0: 	// BEREIT	
		// DO
		IF Objekt.P_State = 3 AND bSkillActiv THEN		// Objekt wurde eingeschalten
			bStarten := TRUE;
		END_IF
		
		// TRANSITION
		IF bStarten	 THEN		
			bStarten := FALSE;
			iState := 1;	
		END_IF
		
		
// _________________________________________________________________________________________________________________________
1: 	// LAUFEND
		// DO		
			// Auswerten
			M_Auswertung();
				
			// Stoppen durch Sysezm
			IF bStoppen THEN																								// Transition wenn System das Orbjekt stoppt
				bGestoppt := TRUE;
			END_IF
			
			// Objekt hat sich selber gestoppt
			IF Objekt.P_State = 4 THEN																							// Objekt hat Prozess abgeschlossen
				bObjektFertig := TRUE;																							// Objekt ist fertig und wieder bereit
			END_IF
			
			// Limit Erreicht -> Objekt wird gestoppt
			IF bLimit THEN
				Objekt.M_Stop();
			END_IF
			
			// Wert Erreicht -> Objekt wird gestoppt
			IF bErreicht THEN
				Objekt.M_Stop();
			END_IF
			
		// TRANSITION 
		IF bGestoppt THEN																								// Transition zu BEREIT
			bGestoppt := FALSE;													
			iState := 0;
		END_IF
		
		IF bObjektFertig THEN																							// Transition zu ABGESCHLOSSEN
			bObjektFertig := FALSE;																							// Skill wird nicht mehr ausgeführt
			iState := 2;																									// Objekt ist fertig und wieder bereit
		END_IF
		
		IF bLimit AND Objekt.P_State = 5 THEN																							// Transition zu LIMIT
			bLimit := FALSE;
			iState := 4;
		END_IF
		
		IF bErreicht AND Objekt.P_State = 5 THEN																							// Transition zu ERREICHT
			bErreicht := FALSE;
			iState := 5;
		END_IF
			
// _________________________________________________________________________________________________________________________			
2: 	// ABGESCHLOSSEN
		// DO
		M_Reset();
		
		IF Objekt.P_State = 1 THEN																							// Objekt wurde geresettet
			bSkillFertig := TRUE;									
		END_IF
			
		//  TRANSITION
		IF bSkillFertig THEN
			bSkillFertig := FALSE;																																											// Resetten von Objekt
			iState := 0;
		END_IF
		
// _________________________________________________________________________________________________________________________
3: 	// FEHLER
		// DO 	
		
		// TRANSITION
		IF bResetten THEN
			iState := 0;
		END_IF
		
// _________________________________________________________________________________________________________________________			
4: 	// LIMIT
		// DO		
		M_Reset();
		
		IF Objekt.P_State = 1 THEN																								// Objekt wurde geresettet
			bResetten := TRUE;								
		END_IF
	
		// TRANSITION
		IF bResetten THEN
			bResetten := FALSE;
			iState := 0;
		END_IF
			
// _________________________________________________________________________________________________________________________
5: 	// ERREICHT		
		// DO 
		M_Reset();
		
		IF Objekt.P_State = 1 THEN																							// Objekt wurde geresettet
			bSkillFertig := TRUE;									
		END_IF
		
		// TRANSITION
		IF bSkillFertig THEN
			bSkillFertig := FALSE;
			iState := 0;
		END_IF
		
END_CASE]]></ST>
    </Implementation>
    <Folder Name="01_Steuerungsmethoden" Id="{24108a3b-139b-4abc-9ee1-f7b20236da36}" />
    <Folder Name="02_Steuerungseigenschaften" Id="{81dfad2e-6b4f-4546-926f-b569be2ebe07}" />
    <Folder Name="03_Prozessmethoden" Id="{2f427658-d188-4219-be86-1c49d4b928f8}" />
    <Folder Name="04_Prozesseigenschaften" Id="{a2461b16-3250-454b-89ff-eb78ad4ff0ad}" />
    <Method Name="M_Auswertung" Id="{466dc7d6-1b9c-4401-885b-20f06b59f3fc}" FolderPath="03_Prozessmethoden\">
      <Declaration><![CDATA[METHOD M_Auswertung : BOOL
VAR_INPUT
END_VAR
VAR
	bLimit_x		:BOOL;
	bLimit_y		:BOOL;
	bLimit_z		:BOOL;
	
	bErreicht_x		:BOOL;
	bErreicht_y		:BOOL;
	bErreicht_z		:BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF sLimit.Fx <> 0 THEN
	IF ABS(sMessdaten.Fx) >= ABS(sLimit.Fx) THEN
		bLimit_x := TRUE;
	END_IF
END_IF

IF sLimit.Fy <> 0 THEN
	IF ABS(sMessdaten.Fy) >= ABS(sLimit.Fy) THEN
		bLimit_y := TRUE;
	END_IF
END_IF

IF sLimit.Fz <> 0 THEN
	IF ABS(sMessdaten.Fz) >= ABS(sLimit.Fz) THEN
		bLimit_x := TRUE;
	END_IF
END_IF

// Auswertung von Erreicht-Wert
IF sErreicht.Fx <> 0 THEN
	IF ABS(sMessdaten.Fx) >= ABS(sErreicht.Fx) THEN
		bErreicht_x := TRUE;
	END_IF
END_IF

IF sErreicht.Fy <> 0 THEN
	IF ABS(sMessdaten.Fy) >= ABS(sErreicht.Fy) THEN
		bErreicht_y := TRUE;
	END_IF
END_IF

IF sErreicht.Fz <> 0 THEN
	IF ABS(sMessdaten.Fz) >= ABS(sErreicht.Fz) THEN
		bErreicht_z := TRUE;
	END_IF
END_IF

IF bLimit_x OR bLimit_y OR bLimit_z THEN
	bLimit := TRUE;
END_IF

IF bErreicht_x OR bErreicht_y OR bErreicht_z THEN
	bErreicht := TRUE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Reset" Id="{2e9015dd-f485-4671-90bc-8e693338c9f5}" FolderPath="01_Steuerungsmethoden\">
      <Declaration><![CDATA[METHOD M_Reset : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Objekt.M_Reset();
bSkillActiv := FALSE;

eRoboterPos.q1 := 0;
eRoboterPos.q2 := 0;
eRoboterPos.q3 := 0;
eRoboterPos.q4 := 0;
eRoboterPos.q5 := 0;
eRoboterPos.q6 := 0;
eRoboterPos.v := 0;
eRoboterPos.a := 0;
eRoboterPos.MoveTyp := 0;
eRoboterPos.PosTyp := 0;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Start" Id="{bcb53f09-8eee-41d0-920b-9b5bddfe5634}" FolderPath="01_Steuerungsmethoden\">
      <Declaration><![CDATA[METHOD M_Start : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Prüfen von Bedingungen
	// Ist das  System im korrekten Status
	IF eSysState = 1 OR eSysState = 2 THEN
		// Ist der Skill im korrekten Status 
		IF iState = 0 THEN
			IF eRoboterPos.a <> 0 AND eRoboterPos.v <> 0 THEN
				Objekt.P_Prozessparameter := eRoboterPos;
				Objekt.M_Start();
				bSkillActiv := TRUE;	
			END_IF
		END_IF
	END_IF
	]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Stop" Id="{ec311155-7585-4e1e-a8e1-ec23ba2ba7f7}" FolderPath="01_Steuerungsmethoden\">
      <Declaration><![CDATA[METHOD M_Stop : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Objekt.M_Stop();
bSkillActiv := FALSE;

eRoboterPos.q1 := 0;
eRoboterPos.q2 := 0;
eRoboterPos.q3 := 0;
eRoboterPos.q4 := 0;
eRoboterPos.q5 := 0;
eRoboterPos.q6 := 0;
eRoboterPos.v := 0;
eRoboterPos.a := 0;
eRoboterPos.MoveTyp := 0;
eRoboterPos.PosTyp := 0;]]></ST>
      </Implementation>
    </Method>
    <Property Name="P_Erreicht" Id="{65ff26fd-bd5b-4448-b176-bea996d64888}" FolderPath="04_Prozesseigenschaften\">
      <Declaration><![CDATA[PROPERTY P_Erreicht : sKraftVariablen]]></Declaration>
      <Set Name="Set" Id="{e9f2cea9-274a-4473-a8e1-84efb25603cf}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[sErreicht := P_Erreicht;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="P_Limit" Id="{d6272a96-2f33-45dc-be76-82f80d521d23}" FolderPath="04_Prozesseigenschaften\">
      <Declaration><![CDATA[PROPERTY P_Limit : sKraftVariablen]]></Declaration>
      <Set Name="Set" Id="{997dbb89-0df6-40fe-8bb6-a14113d7e3ed}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[sLimit := P_Limit;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="P_RobotParam" Id="{8624615e-7d1d-4a98-af5b-70ce2c99259c}" FolderPath="04_Prozesseigenschaften\">
      <Declaration><![CDATA[PROPERTY P_RobotParam : sRoboterProzessVariablen]]></Declaration>
      <Set Name="Set" Id="{d4382561-34b8-4238-9b23-e9a998a335f2}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[eRoboterPos := P_RobotParam;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="P_State" Id="{a7d51d8e-fee2-4f41-ac35-d1a2b9f3cc03}" FolderPath="02_Steuerungseigenschaften\">
      <Declaration><![CDATA[PROPERTY P_State : eSkillState]]></Declaration>
      <Get Name="Get" Id="{a4e9133e-8c8c-4005-84ab-77b9f037aa9d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_State := iState; ]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>